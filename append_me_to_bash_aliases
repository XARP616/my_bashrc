alias py=python3
alias dk=docker
alias here="nohup nautilus -w . > /dev/null &"
alias cls=clear
alias another="gnome-terminal & disown"
alias pyenv="python3 -m venv"
alias calc="bc <<<"
alias ltr="ls -lhtr"
alias lt="ls -lht"

# Bash only (not working with zsh)
function set-title() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1=${ORIG}${TITLE}
}

function bashreload() {
  source ~/.bashrc
 
  if [ $? -eq 0 ]; then
    echo "bashrc reloaded"
  fi
}

function wait_msg {
  seconds=$(( $1 - 1 ))
  message=$2

  for (( i=$seconds; i>=0; i-- ))
  do
    echo -en "\r\033[2K$message [$i s]"
    sleep 1
  done
  echo ""
}

function yes_or_no() {

  if [ $# -ne 1 ]; then
    echo "This function requires a question as a single argument"
    echo "Return: { 1 yes | 0 no | -1 not valid }"
    return -1
  fi

  question=$1

  printf "$1 [y/N] "
  read res

  if [ "$res" = "y" ]; then
    return 1
  elif [ "$res" = "n" ]; then
    return 0
  else
    return -1
  fi
}

function empty() {

  if [ $# -eq 0 ]; then
    echo "No filename specified"
    return -1
  elif [ $# -gt 1 ]; then
    yes_or_no "This operation will affect more than one file. Proceed?"
  elif [ $# -eq 1 ]; then
    yes_or_no "Are you sure you want to clear this file contents?"
  fi

  if [ $? -eq 1 ]; then
    for filetoremove in $@
    do
      if [ -e $filetoremove ]; then
        echo "" > $filetoremove
      else
        echo "File '$filetoremove' does not exist"
      fi
    done
  else
    echo "Cancelled."
  fi

}

function port() {
  sudo lsof -i:$1
}
alias ports="netstat -tulpen"

alias curltime="curl -w \"@$HOME/.curl-format.txt\" -o /dev/null -s "

alias ncsv="nc -l -p"

function silent()       { command $@ > /dev/null 2>&1 & }
function silent_debug() { command $@ 1> /dev/null & }

function swap() {
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE "$2"
}

# Location
function setloc() {
  export savedloc=$(pwd)
}

function goback() {
  if [ -n "$savedloc" ]; then
     export secondloc=$(pwd)
     cd $savedloc
  else
     echo "No location set"
  fi
}

function andforth() {
  if [ -n "$secondloc" ]; then
    cd $secondloc
    unset secondloc
  else
    echo "Must first use goback"
  fi
}

function clearloc() {
  unset savedloc
  unset secondloc
}

function showloc() {
  if [ -n "$savedloc" ]; then
    echo "Checkpoint location: $savedloc"
  else
    echo "No location set. Use setloc"
  fi
  echo "Current location: $(pwd)"
  if [ -n "$secondloc" ]; then
    echo "Coming from: $secondloc"
  fi
}

